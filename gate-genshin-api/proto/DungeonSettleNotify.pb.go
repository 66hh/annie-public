// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: DungeonSettleNotify.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 999
// EnetChannelId: 0
// EnetIsReliable: true
type DungeonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrengthenPointDataMap map[uint32]*StrengthenPointData `protobuf:"bytes,14,rep,name=strengthen_point_data_map,json=strengthenPointDataMap,proto3" json:"strengthen_point_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsSuccess              bool                            `protobuf:"varint,7,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	CloseTime              uint32                          `protobuf:"varint,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	Unk2700_OMCCFBBDJMI    uint32                          `protobuf:"varint,1,opt,name=Unk2700_OMCCFBBDJMI,json=Unk2700OMCCFBBDJMI,proto3" json:"Unk2700_OMCCFBBDJMI,omitempty"`
	SettleShow             map[uint32]*ParamList           `protobuf:"bytes,5,rep,name=settle_show,json=settleShow,proto3" json:"settle_show,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExhibitionInfoList     []*DungeonSettleExhibitionInfo  `protobuf:"bytes,8,rep,name=exhibition_info_list,json=exhibitionInfoList,proto3" json:"exhibition_info_list,omitempty"`
	FailCondList           []uint32                        `protobuf:"varint,11,rep,packed,name=fail_cond_list,json=failCondList,proto3" json:"fail_cond_list,omitempty"`
	DungeonId              uint32                          `protobuf:"varint,13,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	Result                 uint32                          `protobuf:"varint,10,opt,name=result,proto3" json:"result,omitempty"`
	// Types that are assignable to Detail:
	//	*DungeonSettleNotify_TowerLevelEndNotify
	//	*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify
	//	*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo
	//	*DungeonSettleNotify_EffigyChallengeDungeonResultInfo
	//	*DungeonSettleNotify_RoguelikeDungeonSettleInfo
	//	*DungeonSettleNotify_CrystalLinkSettleInfo
	//	*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo
	//	*DungeonSettleNotify_InstableSpraySettleInfo
	Detail isDungeonSettleNotify_Detail `protobuf_oneof:"detail"`
}

func (x *DungeonSettleNotify) Reset() {
	*x = DungeonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DungeonSettleNotify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSettleNotify) ProtoMessage() {}

func (x *DungeonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_DungeonSettleNotify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSettleNotify.ProtoReflect.Descriptor instead.
func (*DungeonSettleNotify) Descriptor() ([]byte, []int) {
	return file_DungeonSettleNotify_proto_rawDescGZIP(), []int{0}
}

func (x *DungeonSettleNotify) GetStrengthenPointDataMap() map[uint32]*StrengthenPointData {
	if x != nil {
		return x.StrengthenPointDataMap
	}
	return nil
}

func (x *DungeonSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DungeonSettleNotify) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *DungeonSettleNotify) GetUnk2700_OMCCFBBDJMI() uint32 {
	if x != nil {
		return x.Unk2700_OMCCFBBDJMI
	}
	return 0
}

func (x *DungeonSettleNotify) GetSettleShow() map[uint32]*ParamList {
	if x != nil {
		return x.SettleShow
	}
	return nil
}

func (x *DungeonSettleNotify) GetExhibitionInfoList() []*DungeonSettleExhibitionInfo {
	if x != nil {
		return x.ExhibitionInfoList
	}
	return nil
}

func (x *DungeonSettleNotify) GetFailCondList() []uint32 {
	if x != nil {
		return x.FailCondList
	}
	return nil
}

func (x *DungeonSettleNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonSettleNotify) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (m *DungeonSettleNotify) GetDetail() isDungeonSettleNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *DungeonSettleNotify) GetTowerLevelEndNotify() *TowerLevelEndNotify {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TowerLevelEndNotify); ok {
		return x.TowerLevelEndNotify
	}
	return nil
}

func (x *DungeonSettleNotify) GetTrialAvatarFirstPassDungeonNotify() *TrialAvatarFirstPassDungeonNotify {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify); ok {
		return x.TrialAvatarFirstPassDungeonNotify
	}
	return nil
}

func (x *DungeonSettleNotify) GetChannellerSlabLoopDungeonResultInfo() *ChannelerSlabLoopDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo); ok {
		return x.ChannellerSlabLoopDungeonResultInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetEffigyChallengeDungeonResultInfo() *EffigyChallengeDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_EffigyChallengeDungeonResultInfo); ok {
		return x.EffigyChallengeDungeonResultInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetRoguelikeDungeonSettleInfo() *RoguelikeDungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_RoguelikeDungeonSettleInfo); ok {
		return x.RoguelikeDungeonSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetCrystalLinkSettleInfo() *CrystalLinkSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_CrystalLinkSettleInfo); ok {
		return x.CrystalLinkSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetSummerTimeV2DungeonSettleInfo() *SummerTimeV2DungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo); ok {
		return x.SummerTimeV2DungeonSettleInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetInstableSpraySettleInfo() *InstableSpraySettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_InstableSpraySettleInfo); ok {
		return x.InstableSpraySettleInfo
	}
	return nil
}

type isDungeonSettleNotify_Detail interface {
	isDungeonSettleNotify_Detail()
}

type DungeonSettleNotify_TowerLevelEndNotify struct {
	TowerLevelEndNotify *TowerLevelEndNotify `protobuf:"bytes,351,opt,name=tower_level_end_notify,json=towerLevelEndNotify,proto3,oneof"`
}

type DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify struct {
	TrialAvatarFirstPassDungeonNotify *TrialAvatarFirstPassDungeonNotify `protobuf:"bytes,635,opt,name=trial_avatar_first_pass_dungeon_notify,json=trialAvatarFirstPassDungeonNotify,proto3,oneof"`
}

type DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo struct {
	ChannellerSlabLoopDungeonResultInfo *ChannelerSlabLoopDungeonResultInfo `protobuf:"bytes,686,opt,name=channeller_slab_loop_dungeon_result_info,json=channellerSlabLoopDungeonResultInfo,proto3,oneof"`
}

type DungeonSettleNotify_EffigyChallengeDungeonResultInfo struct {
	EffigyChallengeDungeonResultInfo *EffigyChallengeDungeonResultInfo `protobuf:"bytes,328,opt,name=effigy_challenge_dungeon_result_info,json=effigyChallengeDungeonResultInfo,proto3,oneof"`
}

type DungeonSettleNotify_RoguelikeDungeonSettleInfo struct {
	RoguelikeDungeonSettleInfo *RoguelikeDungeonSettleInfo `protobuf:"bytes,1482,opt,name=roguelike_dungeon_settle_info,json=roguelikeDungeonSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_CrystalLinkSettleInfo struct {
	CrystalLinkSettleInfo *CrystalLinkSettleInfo `protobuf:"bytes,112,opt,name=crystal_link_settle_info,json=crystalLinkSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_SummerTimeV2DungeonSettleInfo struct {
	SummerTimeV2DungeonSettleInfo *SummerTimeV2DungeonSettleInfo `protobuf:"bytes,1882,opt,name=summer_time_v2_dungeon_settle_info,json=summerTimeV2DungeonSettleInfo,proto3,oneof"`
}

type DungeonSettleNotify_InstableSpraySettleInfo struct {
	InstableSpraySettleInfo *InstableSpraySettleInfo `protobuf:"bytes,193,opt,name=instable_spray_settle_info,json=instableSpraySettleInfo,proto3,oneof"`
}

func (*DungeonSettleNotify_TowerLevelEndNotify) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_EffigyChallengeDungeonResultInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_RoguelikeDungeonSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_CrystalLinkSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_InstableSpraySettleInfo) isDungeonSettleNotify_Detail() {}

var File_DungeonSettleNotify_proto protoreflect.FileDescriptor

var file_DungeonSettleNotify_proto_rawDesc = []byte{
	0x0a, 0x19, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x53, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x0b, 0x0a, 0x13, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x6b, 0x0a, 0x19, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x32, 0x37, 0x30,
	0x30, 0x5f, 0x4f, 0x4d, 0x43, 0x43, 0x46, 0x42, 0x42, 0x44, 0x4a, 0x4d, 0x49, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x55, 0x6e, 0x6b, 0x32, 0x37, 0x30, 0x30, 0x4f, 0x4d, 0x43, 0x43,
	0x46, 0x42, 0x42, 0x44, 0x4a, 0x4d, 0x49, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x4e,
	0x0a, 0x14, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xdf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x48, 0x00, 0x52, 0x13, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x78, 0x0a, 0x26, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0xfb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x00,
	0x52, 0x21, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x7d, 0x0a, 0x28, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xae, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f,
	0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x74, 0x0a, 0x24, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1d, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xca, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x18, 0x63,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c,
	0x0a, 0x22, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x32,
	0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xda, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x32, 0x44, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x1a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x72, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5f, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_DungeonSettleNotify_proto_rawDescOnce sync.Once
	file_DungeonSettleNotify_proto_rawDescData = file_DungeonSettleNotify_proto_rawDesc
)

func file_DungeonSettleNotify_proto_rawDescGZIP() []byte {
	file_DungeonSettleNotify_proto_rawDescOnce.Do(func() {
		file_DungeonSettleNotify_proto_rawDescData = protoimpl.X.CompressGZIP(file_DungeonSettleNotify_proto_rawDescData)
	})
	return file_DungeonSettleNotify_proto_rawDescData
}

var file_DungeonSettleNotify_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_DungeonSettleNotify_proto_goTypes = []interface{}{
	(*DungeonSettleNotify)(nil),         // 0: DungeonSettleNotify
	nil,                                 // 1: DungeonSettleNotify.StrengthenPointDataMapEntry
	nil,                                 // 2: DungeonSettleNotify.SettleShowEntry
	(*DungeonSettleExhibitionInfo)(nil), // 3: DungeonSettleExhibitionInfo
	(*TowerLevelEndNotify)(nil),         // 4: TowerLevelEndNotify
	(*TrialAvatarFirstPassDungeonNotify)(nil),  // 5: TrialAvatarFirstPassDungeonNotify
	(*ChannelerSlabLoopDungeonResultInfo)(nil), // 6: ChannelerSlabLoopDungeonResultInfo
	(*EffigyChallengeDungeonResultInfo)(nil),   // 7: EffigyChallengeDungeonResultInfo
	(*RoguelikeDungeonSettleInfo)(nil),         // 8: RoguelikeDungeonSettleInfo
	(*CrystalLinkSettleInfo)(nil),              // 9: CrystalLinkSettleInfo
	(*SummerTimeV2DungeonSettleInfo)(nil),      // 10: SummerTimeV2DungeonSettleInfo
	(*InstableSpraySettleInfo)(nil),            // 11: InstableSpraySettleInfo
	(*StrengthenPointData)(nil),                // 12: StrengthenPointData
	(*ParamList)(nil),                          // 13: ParamList
}
var file_DungeonSettleNotify_proto_depIdxs = []int32{
	1,  // 0: DungeonSettleNotify.strengthen_point_data_map:type_name -> DungeonSettleNotify.StrengthenPointDataMapEntry
	2,  // 1: DungeonSettleNotify.settle_show:type_name -> DungeonSettleNotify.SettleShowEntry
	3,  // 2: DungeonSettleNotify.exhibition_info_list:type_name -> DungeonSettleExhibitionInfo
	4,  // 3: DungeonSettleNotify.tower_level_end_notify:type_name -> TowerLevelEndNotify
	5,  // 4: DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify:type_name -> TrialAvatarFirstPassDungeonNotify
	6,  // 5: DungeonSettleNotify.channeller_slab_loop_dungeon_result_info:type_name -> ChannelerSlabLoopDungeonResultInfo
	7,  // 6: DungeonSettleNotify.effigy_challenge_dungeon_result_info:type_name -> EffigyChallengeDungeonResultInfo
	8,  // 7: DungeonSettleNotify.roguelike_dungeon_settle_info:type_name -> RoguelikeDungeonSettleInfo
	9,  // 8: DungeonSettleNotify.crystal_link_settle_info:type_name -> CrystalLinkSettleInfo
	10, // 9: DungeonSettleNotify.summer_time_v2_dungeon_settle_info:type_name -> SummerTimeV2DungeonSettleInfo
	11, // 10: DungeonSettleNotify.instable_spray_settle_info:type_name -> InstableSpraySettleInfo
	12, // 11: DungeonSettleNotify.StrengthenPointDataMapEntry.value:type_name -> StrengthenPointData
	13, // 12: DungeonSettleNotify.SettleShowEntry.value:type_name -> ParamList
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_DungeonSettleNotify_proto_init() }
func file_DungeonSettleNotify_proto_init() {
	if File_DungeonSettleNotify_proto != nil {
		return
	}
	file_ChannelerSlabLoopDungeonResultInfo_proto_init()
	file_CrystalLinkSettleInfo_proto_init()
	file_DungeonSettleExhibitionInfo_proto_init()
	file_EffigyChallengeDungeonResultInfo_proto_init()
	file_InstableSpraySettleInfo_proto_init()
	file_ParamList_proto_init()
	file_RoguelikeDungeonSettleInfo_proto_init()
	file_StrengthenPointData_proto_init()
	file_SummerTimeV2DungeonSettleInfo_proto_init()
	file_TowerLevelEndNotify_proto_init()
	file_TrialAvatarFirstPassDungeonNotify_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DungeonSettleNotify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_DungeonSettleNotify_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DungeonSettleNotify_TowerLevelEndNotify)(nil),
		(*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify)(nil),
		(*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo)(nil),
		(*DungeonSettleNotify_EffigyChallengeDungeonResultInfo)(nil),
		(*DungeonSettleNotify_RoguelikeDungeonSettleInfo)(nil),
		(*DungeonSettleNotify_CrystalLinkSettleInfo)(nil),
		(*DungeonSettleNotify_SummerTimeV2DungeonSettleInfo)(nil),
		(*DungeonSettleNotify_InstableSpraySettleInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DungeonSettleNotify_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DungeonSettleNotify_proto_goTypes,
		DependencyIndexes: file_DungeonSettleNotify_proto_depIdxs,
		MessageInfos:      file_DungeonSettleNotify_proto_msgTypes,
	}.Build()
	File_DungeonSettleNotify_proto = out.File
	file_DungeonSettleNotify_proto_rawDesc = nil
	file_DungeonSettleNotify_proto_goTypes = nil
	file_DungeonSettleNotify_proto_depIdxs = nil
}
