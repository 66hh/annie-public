// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: ShowAvatarInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId                uint32                `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	PropMap                 map[uint32]*PropValue `protobuf:"bytes,2,rep,name=prop_map,json=propMap,proto3" json:"prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TalentIdList            []uint32              `protobuf:"varint,3,rep,packed,name=talent_id_list,json=talentIdList,proto3" json:"talent_id_list,omitempty"`
	FightPropMap            map[uint32]float32    `protobuf:"bytes,4,rep,name=fight_prop_map,json=fightPropMap,proto3" json:"fight_prop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	SkillDepotId            uint32                `protobuf:"varint,5,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	CoreProudSkillLevel     uint32                `protobuf:"varint,6,opt,name=core_proud_skill_level,json=coreProudSkillLevel,proto3" json:"core_proud_skill_level,omitempty"`
	InherentProudSkillList  []uint32              `protobuf:"varint,7,rep,packed,name=inherent_proud_skill_list,json=inherentProudSkillList,proto3" json:"inherent_proud_skill_list,omitempty"`
	SkillLevelMap           map[uint32]uint32     `protobuf:"bytes,8,rep,name=skill_level_map,json=skillLevelMap,proto3" json:"skill_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ProudSkillExtraLevelMap map[uint32]uint32     `protobuf:"bytes,9,rep,name=proud_skill_extra_level_map,json=proudSkillExtraLevelMap,proto3" json:"proud_skill_extra_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EquipList               []*ShowEquip          `protobuf:"bytes,10,rep,name=equip_list,json=equipList,proto3" json:"equip_list,omitempty"`
	FetterInfo              *AvatarFetterInfo     `protobuf:"bytes,11,opt,name=fetter_info,json=fetterInfo,proto3" json:"fetter_info,omitempty"`
	CostumeId               uint32                `protobuf:"varint,12,opt,name=costume_id,json=costumeId,proto3" json:"costume_id,omitempty"`
	ExcelInfo               *AvatarExcelInfo      `protobuf:"bytes,13,opt,name=excel_info,json=excelInfo,proto3" json:"excel_info,omitempty"`
}

func (x *ShowAvatarInfo) Reset() {
	*x = ShowAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ShowAvatarInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAvatarInfo) ProtoMessage() {}

func (x *ShowAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ShowAvatarInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAvatarInfo.ProtoReflect.Descriptor instead.
func (*ShowAvatarInfo) Descriptor() ([]byte, []int) {
	return file_ShowAvatarInfo_proto_rawDescGZIP(), []int{0}
}

func (x *ShowAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *ShowAvatarInfo) GetPropMap() map[uint32]*PropValue {
	if x != nil {
		return x.PropMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetTalentIdList() []uint32 {
	if x != nil {
		return x.TalentIdList
	}
	return nil
}

func (x *ShowAvatarInfo) GetFightPropMap() map[uint32]float32 {
	if x != nil {
		return x.FightPropMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *ShowAvatarInfo) GetCoreProudSkillLevel() uint32 {
	if x != nil {
		return x.CoreProudSkillLevel
	}
	return 0
}

func (x *ShowAvatarInfo) GetInherentProudSkillList() []uint32 {
	if x != nil {
		return x.InherentProudSkillList
	}
	return nil
}

func (x *ShowAvatarInfo) GetSkillLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillLevelMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetProudSkillExtraLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.ProudSkillExtraLevelMap
	}
	return nil
}

func (x *ShowAvatarInfo) GetEquipList() []*ShowEquip {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *ShowAvatarInfo) GetFetterInfo() *AvatarFetterInfo {
	if x != nil {
		return x.FetterInfo
	}
	return nil
}

func (x *ShowAvatarInfo) GetCostumeId() uint32 {
	if x != nil {
		return x.CostumeId
	}
	return 0
}

func (x *ShowAvatarInfo) GetExcelInfo() *AvatarExcelInfo {
	if x != nil {
		return x.ExcelInfo
	}
	return nil
}

var File_ShowAvatarInfo_proto protoreflect.FileDescriptor

var file_ShowAvatarInfo_proto_rawDesc = []byte{
	0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x07, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x75, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x6a, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x29, 0x0a,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x46, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x75, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ShowAvatarInfo_proto_rawDescOnce sync.Once
	file_ShowAvatarInfo_proto_rawDescData = file_ShowAvatarInfo_proto_rawDesc
)

func file_ShowAvatarInfo_proto_rawDescGZIP() []byte {
	file_ShowAvatarInfo_proto_rawDescOnce.Do(func() {
		file_ShowAvatarInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_ShowAvatarInfo_proto_rawDescData)
	})
	return file_ShowAvatarInfo_proto_rawDescData
}

var file_ShowAvatarInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ShowAvatarInfo_proto_goTypes = []interface{}{
	(*ShowAvatarInfo)(nil),   // 0: ShowAvatarInfo
	nil,                      // 1: ShowAvatarInfo.PropMapEntry
	nil,                      // 2: ShowAvatarInfo.FightPropMapEntry
	nil,                      // 3: ShowAvatarInfo.SkillLevelMapEntry
	nil,                      // 4: ShowAvatarInfo.ProudSkillExtraLevelMapEntry
	(*ShowEquip)(nil),        // 5: ShowEquip
	(*AvatarFetterInfo)(nil), // 6: AvatarFetterInfo
	(*AvatarExcelInfo)(nil),  // 7: AvatarExcelInfo
	(*PropValue)(nil),        // 8: PropValue
}
var file_ShowAvatarInfo_proto_depIdxs = []int32{
	1, // 0: ShowAvatarInfo.prop_map:type_name -> ShowAvatarInfo.PropMapEntry
	2, // 1: ShowAvatarInfo.fight_prop_map:type_name -> ShowAvatarInfo.FightPropMapEntry
	3, // 2: ShowAvatarInfo.skill_level_map:type_name -> ShowAvatarInfo.SkillLevelMapEntry
	4, // 3: ShowAvatarInfo.proud_skill_extra_level_map:type_name -> ShowAvatarInfo.ProudSkillExtraLevelMapEntry
	5, // 4: ShowAvatarInfo.equip_list:type_name -> ShowEquip
	6, // 5: ShowAvatarInfo.fetter_info:type_name -> AvatarFetterInfo
	7, // 6: ShowAvatarInfo.excel_info:type_name -> AvatarExcelInfo
	8, // 7: ShowAvatarInfo.PropMapEntry.value:type_name -> PropValue
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ShowAvatarInfo_proto_init() }
func file_ShowAvatarInfo_proto_init() {
	if File_ShowAvatarInfo_proto != nil {
		return
	}
	file_AvatarExcelInfo_proto_init()
	file_AvatarFetterInfo_proto_init()
	file_PropValue_proto_init()
	file_ShowEquip_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ShowAvatarInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ShowAvatarInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ShowAvatarInfo_proto_goTypes,
		DependencyIndexes: file_ShowAvatarInfo_proto_depIdxs,
		MessageInfos:      file_ShowAvatarInfo_proto_msgTypes,
	}.Build()
	File_ShowAvatarInfo_proto = out.File
	file_ShowAvatarInfo_proto_rawDesc = nil
	file_ShowAvatarInfo_proto_goTypes = nil
	file_ShowAvatarInfo_proto_depIdxs = nil
}
