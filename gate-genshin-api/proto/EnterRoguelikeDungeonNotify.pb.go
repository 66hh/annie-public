// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: EnterRoguelikeDungeonNotify.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 8652
// EnetChannelId: 0
// EnetIsReliable: true
type EnterRoguelikeDungeonNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMistClear             bool                      `protobuf:"varint,14,opt,name=is_mist_clear,json=isMistClear,proto3" json:"is_mist_clear,omitempty"`
	DungeonWeightConfigId   uint32                    `protobuf:"varint,2,opt,name=dungeon_weight_config_id,json=dungeonWeightConfigId,proto3" json:"dungeon_weight_config_id,omitempty"`
	RuneRecordList          []*RoguelikeRuneRecord    `protobuf:"bytes,6,rep,name=rune_record_list,json=runeRecordList,proto3" json:"rune_record_list,omitempty"`
	OnstageAvatarGuidList   []uint64                  `protobuf:"varint,9,rep,packed,name=onstage_avatar_guid_list,json=onstageAvatarGuidList,proto3" json:"onstage_avatar_guid_list,omitempty"`
	IsFirstEnter            bool                      `protobuf:"varint,205,opt,name=is_first_enter,json=isFirstEnter,proto3" json:"is_first_enter,omitempty"`
	ExploredCellList        []uint32                  `protobuf:"varint,3,rep,packed,name=explored_cell_list,json=exploredCellList,proto3" json:"explored_cell_list,omitempty"`
	CellInfoMap             map[uint32]*RogueCellInfo `protobuf:"bytes,11,rep,name=cell_info_map,json=cellInfoMap,proto3" json:"cell_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DungeonId               uint32                    `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	RefreshCostItemCount    uint32                    `protobuf:"varint,1999,opt,name=refresh_cost_item_count,json=refreshCostItemCount,proto3" json:"refresh_cost_item_count,omitempty"`
	BonusResourceProp       float32                   `protobuf:"fixed32,13,opt,name=bonus_resource_prop,json=bonusResourceProp,proto3" json:"bonus_resource_prop,omitempty"`
	ReviseMonsterLevel      uint32                    `protobuf:"varint,1541,opt,name=revise_monster_level,json=reviseMonsterLevel,proto3" json:"revise_monster_level,omitempty"`
	StageId                 uint32                    `protobuf:"varint,15,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BackstageAvatarGuidList []uint64                  `protobuf:"varint,10,rep,packed,name=backstage_avatar_guid_list,json=backstageAvatarGuidList,proto3" json:"backstage_avatar_guid_list,omitempty"`
	CurCellId               uint32                    `protobuf:"varint,12,opt,name=cur_cell_id,json=curCellId,proto3" json:"cur_cell_id,omitempty"`
	RefreshCostItemId       uint32                    `protobuf:"varint,7,opt,name=refresh_cost_item_id,json=refreshCostItemId,proto3" json:"refresh_cost_item_id,omitempty"`
	CurLevel                uint32                    `protobuf:"varint,8,opt,name=cur_level,json=curLevel,proto3" json:"cur_level,omitempty"`
}

func (x *EnterRoguelikeDungeonNotify) Reset() {
	*x = EnterRoguelikeDungeonNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_EnterRoguelikeDungeonNotify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRoguelikeDungeonNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRoguelikeDungeonNotify) ProtoMessage() {}

func (x *EnterRoguelikeDungeonNotify) ProtoReflect() protoreflect.Message {
	mi := &file_EnterRoguelikeDungeonNotify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRoguelikeDungeonNotify.ProtoReflect.Descriptor instead.
func (*EnterRoguelikeDungeonNotify) Descriptor() ([]byte, []int) {
	return file_EnterRoguelikeDungeonNotify_proto_rawDescGZIP(), []int{0}
}

func (x *EnterRoguelikeDungeonNotify) GetIsMistClear() bool {
	if x != nil {
		return x.IsMistClear
	}
	return false
}

func (x *EnterRoguelikeDungeonNotify) GetDungeonWeightConfigId() uint32 {
	if x != nil {
		return x.DungeonWeightConfigId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetRuneRecordList() []*RoguelikeRuneRecord {
	if x != nil {
		return x.RuneRecordList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetOnstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.OnstageAvatarGuidList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetIsFirstEnter() bool {
	if x != nil {
		return x.IsFirstEnter
	}
	return false
}

func (x *EnterRoguelikeDungeonNotify) GetExploredCellList() []uint32 {
	if x != nil {
		return x.ExploredCellList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetCellInfoMap() map[uint32]*RogueCellInfo {
	if x != nil {
		return x.CellInfoMap
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetRefreshCostItemCount() uint32 {
	if x != nil {
		return x.RefreshCostItemCount
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetBonusResourceProp() float32 {
	if x != nil {
		return x.BonusResourceProp
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetReviseMonsterLevel() uint32 {
	if x != nil {
		return x.ReviseMonsterLevel
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetBackstageAvatarGuidList() []uint64 {
	if x != nil {
		return x.BackstageAvatarGuidList
	}
	return nil
}

func (x *EnterRoguelikeDungeonNotify) GetCurCellId() uint32 {
	if x != nil {
		return x.CurCellId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetRefreshCostItemId() uint32 {
	if x != nil {
		return x.RefreshCostItemId
	}
	return 0
}

func (x *EnterRoguelikeDungeonNotify) GetCurLevel() uint32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

var File_EnterRoguelikeDungeonNotify_proto protoreflect.FileDescriptor

var file_EnterRoguelikeDungeonNotify_proto_rawDesc = []byte{
	0x0a, 0x21, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c,
	0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x06, 0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0e, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x15, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xcd, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xcf, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x85, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x17, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x1a, 0x4e, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_EnterRoguelikeDungeonNotify_proto_rawDescOnce sync.Once
	file_EnterRoguelikeDungeonNotify_proto_rawDescData = file_EnterRoguelikeDungeonNotify_proto_rawDesc
)

func file_EnterRoguelikeDungeonNotify_proto_rawDescGZIP() []byte {
	file_EnterRoguelikeDungeonNotify_proto_rawDescOnce.Do(func() {
		file_EnterRoguelikeDungeonNotify_proto_rawDescData = protoimpl.X.CompressGZIP(file_EnterRoguelikeDungeonNotify_proto_rawDescData)
	})
	return file_EnterRoguelikeDungeonNotify_proto_rawDescData
}

var file_EnterRoguelikeDungeonNotify_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_EnterRoguelikeDungeonNotify_proto_goTypes = []interface{}{
	(*EnterRoguelikeDungeonNotify)(nil), // 0: EnterRoguelikeDungeonNotify
	nil,                                 // 1: EnterRoguelikeDungeonNotify.CellInfoMapEntry
	(*RoguelikeRuneRecord)(nil),         // 2: RoguelikeRuneRecord
	(*RogueCellInfo)(nil),               // 3: RogueCellInfo
}
var file_EnterRoguelikeDungeonNotify_proto_depIdxs = []int32{
	2, // 0: EnterRoguelikeDungeonNotify.rune_record_list:type_name -> RoguelikeRuneRecord
	1, // 1: EnterRoguelikeDungeonNotify.cell_info_map:type_name -> EnterRoguelikeDungeonNotify.CellInfoMapEntry
	3, // 2: EnterRoguelikeDungeonNotify.CellInfoMapEntry.value:type_name -> RogueCellInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_EnterRoguelikeDungeonNotify_proto_init() }
func file_EnterRoguelikeDungeonNotify_proto_init() {
	if File_EnterRoguelikeDungeonNotify_proto != nil {
		return
	}
	file_RogueCellInfo_proto_init()
	file_RoguelikeRuneRecord_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_EnterRoguelikeDungeonNotify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRoguelikeDungeonNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_EnterRoguelikeDungeonNotify_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_EnterRoguelikeDungeonNotify_proto_goTypes,
		DependencyIndexes: file_EnterRoguelikeDungeonNotify_proto_depIdxs,
		MessageInfos:      file_EnterRoguelikeDungeonNotify_proto_msgTypes,
	}.Build()
	File_EnterRoguelikeDungeonNotify_proto = out.File
	file_EnterRoguelikeDungeonNotify_proto_rawDesc = nil
	file_EnterRoguelikeDungeonNotify_proto_goTypes = nil
	file_EnterRoguelikeDungeonNotify_proto_depIdxs = nil
}
