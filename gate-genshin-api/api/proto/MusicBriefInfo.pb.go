// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: MusicBriefInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MusicBriefInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicShareId   uint64   `protobuf:"varint,10,opt,name=music_share_id,json=musicShareId,proto3" json:"music_share_id,omitempty"`
	MusicId        uint32   `protobuf:"varint,9,opt,name=music_id,json=musicId,proto3" json:"music_id,omitempty"`
	AuthorNickname string   `protobuf:"bytes,12,opt,name=author_nickname,json=authorNickname,proto3" json:"author_nickname,omitempty"`
	MusicNoteCount uint32   `protobuf:"varint,8,opt,name=music_note_count,json=musicNoteCount,proto3" json:"music_note_count,omitempty"`
	MaxScore       uint32   `protobuf:"varint,3,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Score          uint32   `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	CreateTime     uint32   `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ShareTime      uint32   `protobuf:"varint,14,opt,name=share_time,json=shareTime,proto3" json:"share_time,omitempty"`
	Position       uint32   `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Settle         bool     `protobuf:"varint,6,opt,name=settle,proto3" json:"settle,omitempty"`
	Version        uint32   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	CanShare       bool     `protobuf:"varint,15,opt,name=can_share,json=canShare,proto3" json:"can_share,omitempty"`
	OAPKHNELBPH    bool     `protobuf:"varint,11,opt,name=OAPKHNELBPH,proto3" json:"OAPKHNELBPH,omitempty"`
	NJHAMJMHPAA    bool     `protobuf:"varint,7,opt,name=NJHAMJMHPAA,proto3" json:"NJHAMJMHPAA,omitempty"`
	ADIBIKKNPKK    uint64   `protobuf:"varint,1,opt,name=ADIBIKKNPKK,proto3" json:"ADIBIKKNPKK,omitempty"`
	Unknown        uint32   `protobuf:"varint,1684,opt,name=unknown,proto3" json:"unknown,omitempty"`
	GIDFMAJFIFE    []uint32 `protobuf:"varint,763,rep,packed,name=GIDFMAJFIFE,proto3" json:"GIDFMAJFIFE,omitempty"`
	OKBJPAKOLIH    []uint32 `protobuf:"varint,921,rep,packed,name=OKBJPAKOLIH,proto3" json:"OKBJPAKOLIH,omitempty"`
	FAOPBAMDFJB    uint32   `protobuf:"varint,335,opt,name=FAOPBAMDFJB,proto3" json:"FAOPBAMDFJB,omitempty"`
	FELMANEFAOE    uint32   `protobuf:"varint,938,opt,name=FELMANEFAOE,proto3" json:"FELMANEFAOE,omitempty"`
}

func (x *MusicBriefInfo) Reset() {
	*x = MusicBriefInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MusicBriefInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicBriefInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicBriefInfo) ProtoMessage() {}

func (x *MusicBriefInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MusicBriefInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicBriefInfo.ProtoReflect.Descriptor instead.
func (*MusicBriefInfo) Descriptor() ([]byte, []int) {
	return file_MusicBriefInfo_proto_rawDescGZIP(), []int{0}
}

func (x *MusicBriefInfo) GetMusicShareId() uint64 {
	if x != nil {
		return x.MusicShareId
	}
	return 0
}

func (x *MusicBriefInfo) GetMusicId() uint32 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

func (x *MusicBriefInfo) GetAuthorNickname() string {
	if x != nil {
		return x.AuthorNickname
	}
	return ""
}

func (x *MusicBriefInfo) GetMusicNoteCount() uint32 {
	if x != nil {
		return x.MusicNoteCount
	}
	return 0
}

func (x *MusicBriefInfo) GetMaxScore() uint32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MusicBriefInfo) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MusicBriefInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MusicBriefInfo) GetShareTime() uint32 {
	if x != nil {
		return x.ShareTime
	}
	return 0
}

func (x *MusicBriefInfo) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *MusicBriefInfo) GetSettle() bool {
	if x != nil {
		return x.Settle
	}
	return false
}

func (x *MusicBriefInfo) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MusicBriefInfo) GetCanShare() bool {
	if x != nil {
		return x.CanShare
	}
	return false
}

func (x *MusicBriefInfo) GetOAPKHNELBPH() bool {
	if x != nil {
		return x.OAPKHNELBPH
	}
	return false
}

func (x *MusicBriefInfo) GetNJHAMJMHPAA() bool {
	if x != nil {
		return x.NJHAMJMHPAA
	}
	return false
}

func (x *MusicBriefInfo) GetADIBIKKNPKK() uint64 {
	if x != nil {
		return x.ADIBIKKNPKK
	}
	return 0
}

func (x *MusicBriefInfo) GetUnknown() uint32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *MusicBriefInfo) GetGIDFMAJFIFE() []uint32 {
	if x != nil {
		return x.GIDFMAJFIFE
	}
	return nil
}

func (x *MusicBriefInfo) GetOKBJPAKOLIH() []uint32 {
	if x != nil {
		return x.OKBJPAKOLIH
	}
	return nil
}

func (x *MusicBriefInfo) GetFAOPBAMDFJB() uint32 {
	if x != nil {
		return x.FAOPBAMDFJB
	}
	return 0
}

func (x *MusicBriefInfo) GetFELMANEFAOE() uint32 {
	if x != nil {
		return x.FELMANEFAOE
	}
	return 0
}

var File_MusicBriefInfo_proto protoreflect.FileDescriptor

var file_MusicBriefInfo_proto_rawDesc = []byte{
	0x0a, 0x14, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x05,
	0x0a, 0x0e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x41, 0x50, 0x4b, 0x48, 0x4e, 0x45, 0x4c, 0x42, 0x50,
	0x48, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f, 0x41, 0x50, 0x4b, 0x48, 0x4e, 0x45,
	0x4c, 0x42, 0x50, 0x48, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x4a, 0x48, 0x41, 0x4d, 0x4a, 0x4d, 0x48,
	0x50, 0x41, 0x41, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4e, 0x4a, 0x48, 0x41, 0x4d,
	0x4a, 0x4d, 0x48, 0x50, 0x41, 0x41, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x44, 0x49, 0x42, 0x49, 0x4b,
	0x4b, 0x4e, 0x50, 0x4b, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x41, 0x44, 0x49,
	0x42, 0x49, 0x4b, 0x4b, 0x4e, 0x50, 0x4b, 0x4b, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x94, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x49, 0x44, 0x46, 0x4d, 0x41, 0x4a, 0x46, 0x49,
	0x46, 0x45, 0x18, 0xfb, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x49, 0x44, 0x46, 0x4d,
	0x41, 0x4a, 0x46, 0x49, 0x46, 0x45, 0x12, 0x21, 0x0a, 0x0b, 0x4f, 0x4b, 0x42, 0x4a, 0x50, 0x41,
	0x4b, 0x4f, 0x4c, 0x49, 0x48, 0x18, 0x99, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x4b,
	0x42, 0x4a, 0x50, 0x41, 0x4b, 0x4f, 0x4c, 0x49, 0x48, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x41, 0x4f,
	0x50, 0x42, 0x41, 0x4d, 0x44, 0x46, 0x4a, 0x42, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x46, 0x41, 0x4f, 0x50, 0x42, 0x41, 0x4d, 0x44, 0x46, 0x4a, 0x42, 0x12, 0x21, 0x0a, 0x0b,
	0x46, 0x45, 0x4c, 0x4d, 0x41, 0x4e, 0x45, 0x46, 0x41, 0x4f, 0x45, 0x18, 0xaa, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x46, 0x45, 0x4c, 0x4d, 0x41, 0x4e, 0x45, 0x46, 0x41, 0x4f, 0x45, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_MusicBriefInfo_proto_rawDescOnce sync.Once
	file_MusicBriefInfo_proto_rawDescData = file_MusicBriefInfo_proto_rawDesc
)

func file_MusicBriefInfo_proto_rawDescGZIP() []byte {
	file_MusicBriefInfo_proto_rawDescOnce.Do(func() {
		file_MusicBriefInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_MusicBriefInfo_proto_rawDescData)
	})
	return file_MusicBriefInfo_proto_rawDescData
}

var file_MusicBriefInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_MusicBriefInfo_proto_goTypes = []interface{}{
	(*MusicBriefInfo)(nil), // 0: proto.MusicBriefInfo
}
var file_MusicBriefInfo_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_MusicBriefInfo_proto_init() }
func file_MusicBriefInfo_proto_init() {
	if File_MusicBriefInfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MusicBriefInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicBriefInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MusicBriefInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MusicBriefInfo_proto_goTypes,
		DependencyIndexes: file_MusicBriefInfo_proto_depIdxs,
		MessageInfos:      file_MusicBriefInfo_proto_msgTypes,
	}.Build()
	File_MusicBriefInfo_proto = out.File
	file_MusicBriefInfo_proto_rawDesc = nil
	file_MusicBriefInfo_proto_goTypes = nil
	file_MusicBriefInfo_proto_depIdxs = nil
}
