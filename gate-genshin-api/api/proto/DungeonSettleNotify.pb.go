// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: DungeonSettleNotify.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 982
// EnetChannelId: 0
// EnetIsReliable: true
type DungeonSettleNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonId              uint32                          `protobuf:"varint,9,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	IsSuccess              bool                            `protobuf:"varint,10,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailCondList           []uint32                        `protobuf:"varint,13,rep,packed,name=fail_cond_list,json=failCondList,proto3" json:"fail_cond_list,omitempty"`
	SettleShow             map[uint32]*ParamList           `protobuf:"bytes,11,rep,name=settle_show,json=settleShow,proto3" json:"settle_show,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CloseTime              uint32                          `protobuf:"varint,12,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	StrengthenPointDataMap map[uint32]*StrengthenPointData `protobuf:"bytes,4,rep,name=strengthen_point_data_map,json=strengthenPointDataMap,proto3" json:"strengthen_point_data_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Result                 uint32                          `protobuf:"varint,15,opt,name=result,proto3" json:"result,omitempty"`
	ExhibitionInfoList     []*DungeonSettleExhibitionInfo  `protobuf:"bytes,14,rep,name=exhibition_info_list,json=exhibitionInfoList,proto3" json:"exhibition_info_list,omitempty"`
	// Types that are assignable to Detail:
	//	*DungeonSettleNotify_TowerLevelEndNotify
	//	*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify
	//	*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo
	//	*DungeonSettleNotify_EffigyChallengeDungeonResultInfo
	//	*DungeonSettleNotify_RoguelikeDungeonSettleInfo
	Detail isDungeonSettleNotify_Detail `protobuf_oneof:"detail"`
}

func (x *DungeonSettleNotify) Reset() {
	*x = DungeonSettleNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DungeonSettleNotify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonSettleNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonSettleNotify) ProtoMessage() {}

func (x *DungeonSettleNotify) ProtoReflect() protoreflect.Message {
	mi := &file_DungeonSettleNotify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonSettleNotify.ProtoReflect.Descriptor instead.
func (*DungeonSettleNotify) Descriptor() ([]byte, []int) {
	return file_DungeonSettleNotify_proto_rawDescGZIP(), []int{0}
}

func (x *DungeonSettleNotify) GetDungeonId() uint32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonSettleNotify) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *DungeonSettleNotify) GetFailCondList() []uint32 {
	if x != nil {
		return x.FailCondList
	}
	return nil
}

func (x *DungeonSettleNotify) GetSettleShow() map[uint32]*ParamList {
	if x != nil {
		return x.SettleShow
	}
	return nil
}

func (x *DungeonSettleNotify) GetCloseTime() uint32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *DungeonSettleNotify) GetStrengthenPointDataMap() map[uint32]*StrengthenPointData {
	if x != nil {
		return x.StrengthenPointDataMap
	}
	return nil
}

func (x *DungeonSettleNotify) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *DungeonSettleNotify) GetExhibitionInfoList() []*DungeonSettleExhibitionInfo {
	if x != nil {
		return x.ExhibitionInfoList
	}
	return nil
}

func (m *DungeonSettleNotify) GetDetail() isDungeonSettleNotify_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *DungeonSettleNotify) GetTowerLevelEndNotify() *TowerLevelEndNotify {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TowerLevelEndNotify); ok {
		return x.TowerLevelEndNotify
	}
	return nil
}

func (x *DungeonSettleNotify) GetTrialAvatarFirstPassDungeonNotify() *TrialAvatarFirstPassDungeonNotify {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify); ok {
		return x.TrialAvatarFirstPassDungeonNotify
	}
	return nil
}

func (x *DungeonSettleNotify) GetChannellerSlabLoopDungeonResultInfo() *ChannellerSlabLoopDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo); ok {
		return x.ChannellerSlabLoopDungeonResultInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetEffigyChallengeDungeonResultInfo() *EffigyChallengeDungeonResultInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_EffigyChallengeDungeonResultInfo); ok {
		return x.EffigyChallengeDungeonResultInfo
	}
	return nil
}

func (x *DungeonSettleNotify) GetRoguelikeDungeonSettleInfo() *RoguelikeDungeonSettleInfo {
	if x, ok := x.GetDetail().(*DungeonSettleNotify_RoguelikeDungeonSettleInfo); ok {
		return x.RoguelikeDungeonSettleInfo
	}
	return nil
}

type isDungeonSettleNotify_Detail interface {
	isDungeonSettleNotify_Detail()
}

type DungeonSettleNotify_TowerLevelEndNotify struct {
	TowerLevelEndNotify *TowerLevelEndNotify `protobuf:"bytes,97,opt,name=tower_level_end_notify,json=towerLevelEndNotify,proto3,oneof"`
}

type DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify struct {
	TrialAvatarFirstPassDungeonNotify *TrialAvatarFirstPassDungeonNotify `protobuf:"bytes,796,opt,name=trial_avatar_first_pass_dungeon_notify,json=trialAvatarFirstPassDungeonNotify,proto3,oneof"`
}

type DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo struct {
	ChannellerSlabLoopDungeonResultInfo *ChannellerSlabLoopDungeonResultInfo `protobuf:"bytes,1671,opt,name=channeller_slab_loop_dungeon_result_info,json=channellerSlabLoopDungeonResultInfo,proto3,oneof"`
}

type DungeonSettleNotify_EffigyChallengeDungeonResultInfo struct {
	EffigyChallengeDungeonResultInfo *EffigyChallengeDungeonResultInfo `protobuf:"bytes,1638,opt,name=effigy_challenge_dungeon_result_info,json=effigyChallengeDungeonResultInfo,proto3,oneof"`
}

type DungeonSettleNotify_RoguelikeDungeonSettleInfo struct {
	RoguelikeDungeonSettleInfo *RoguelikeDungeonSettleInfo `protobuf:"bytes,71,opt,name=roguelike_dungeon_settle_info,json=roguelikeDungeonSettleInfo,proto3,oneof"`
}

func (*DungeonSettleNotify_TowerLevelEndNotify) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_EffigyChallengeDungeonResultInfo) isDungeonSettleNotify_Detail() {}

func (*DungeonSettleNotify_RoguelikeDungeonSettleInfo) isDungeonSettleNotify_Detail() {}

var File_DungeonSettleNotify_proto protoreflect.FileDescriptor

var file_DungeonSettleNotify_proto_rawDesc = []byte{
	0x0a, 0x19, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x26, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x6c, 0x69, 0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x09, 0x0a, 0x13, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a,
	0x14, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x12, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x61, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x00, 0x52, 0x13, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x7e, 0x0a, 0x26, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x9c, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x00, 0x52, 0x21, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x28, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f,
	0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x87, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x62, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a,
	0x24, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe6, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x65, 0x66, 0x66, 0x69, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x66, 0x0a, 0x1d, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69,
	0x6b, 0x65, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65,
	0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x4f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x65, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_DungeonSettleNotify_proto_rawDescOnce sync.Once
	file_DungeonSettleNotify_proto_rawDescData = file_DungeonSettleNotify_proto_rawDesc
)

func file_DungeonSettleNotify_proto_rawDescGZIP() []byte {
	file_DungeonSettleNotify_proto_rawDescOnce.Do(func() {
		file_DungeonSettleNotify_proto_rawDescData = protoimpl.X.CompressGZIP(file_DungeonSettleNotify_proto_rawDescData)
	})
	return file_DungeonSettleNotify_proto_rawDescData
}

var file_DungeonSettleNotify_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_DungeonSettleNotify_proto_goTypes = []interface{}{
	(*DungeonSettleNotify)(nil),         // 0: proto.DungeonSettleNotify
	nil,                                 // 1: proto.DungeonSettleNotify.SettleShowEntry
	nil,                                 // 2: proto.DungeonSettleNotify.StrengthenPointDataMapEntry
	(*DungeonSettleExhibitionInfo)(nil), // 3: proto.DungeonSettleExhibitionInfo
	(*TowerLevelEndNotify)(nil),         // 4: proto.TowerLevelEndNotify
	(*TrialAvatarFirstPassDungeonNotify)(nil),   // 5: proto.TrialAvatarFirstPassDungeonNotify
	(*ChannellerSlabLoopDungeonResultInfo)(nil), // 6: proto.ChannellerSlabLoopDungeonResultInfo
	(*EffigyChallengeDungeonResultInfo)(nil),    // 7: proto.EffigyChallengeDungeonResultInfo
	(*RoguelikeDungeonSettleInfo)(nil),          // 8: proto.RoguelikeDungeonSettleInfo
	(*ParamList)(nil),                           // 9: proto.ParamList
	(*StrengthenPointData)(nil),                 // 10: proto.StrengthenPointData
}
var file_DungeonSettleNotify_proto_depIdxs = []int32{
	1,  // 0: proto.DungeonSettleNotify.settle_show:type_name -> proto.DungeonSettleNotify.SettleShowEntry
	2,  // 1: proto.DungeonSettleNotify.strengthen_point_data_map:type_name -> proto.DungeonSettleNotify.StrengthenPointDataMapEntry
	3,  // 2: proto.DungeonSettleNotify.exhibition_info_list:type_name -> proto.DungeonSettleExhibitionInfo
	4,  // 3: proto.DungeonSettleNotify.tower_level_end_notify:type_name -> proto.TowerLevelEndNotify
	5,  // 4: proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify:type_name -> proto.TrialAvatarFirstPassDungeonNotify
	6,  // 5: proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info:type_name -> proto.ChannellerSlabLoopDungeonResultInfo
	7,  // 6: proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info:type_name -> proto.EffigyChallengeDungeonResultInfo
	8,  // 7: proto.DungeonSettleNotify.roguelike_dungeon_settle_info:type_name -> proto.RoguelikeDungeonSettleInfo
	9,  // 8: proto.DungeonSettleNotify.SettleShowEntry.value:type_name -> proto.ParamList
	10, // 9: proto.DungeonSettleNotify.StrengthenPointDataMapEntry.value:type_name -> proto.StrengthenPointData
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_DungeonSettleNotify_proto_init() }
func file_DungeonSettleNotify_proto_init() {
	if File_DungeonSettleNotify_proto != nil {
		return
	}
	file_ChannellerSlabLoopDungeonResultInfo_proto_init()
	file_DungeonSettleExhibitionInfo_proto_init()
	file_EffigyChallengeDungeonResultInfo_proto_init()
	file_ParamList_proto_init()
	file_RoguelikeDungeonSettleInfo_proto_init()
	file_StrengthenPointData_proto_init()
	file_TowerLevelEndNotify_proto_init()
	file_TrialAvatarFirstPassDungeonNotify_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DungeonSettleNotify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonSettleNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_DungeonSettleNotify_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DungeonSettleNotify_TowerLevelEndNotify)(nil),
		(*DungeonSettleNotify_TrialAvatarFirstPassDungeonNotify)(nil),
		(*DungeonSettleNotify_ChannellerSlabLoopDungeonResultInfo)(nil),
		(*DungeonSettleNotify_EffigyChallengeDungeonResultInfo)(nil),
		(*DungeonSettleNotify_RoguelikeDungeonSettleInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DungeonSettleNotify_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DungeonSettleNotify_proto_goTypes,
		DependencyIndexes: file_DungeonSettleNotify_proto_depIdxs,
		MessageInfos:      file_DungeonSettleNotify_proto_msgTypes,
	}.Build()
	File_DungeonSettleNotify_proto = out.File
	file_DungeonSettleNotify_proto_rawDesc = nil
	file_DungeonSettleNotify_proto_goTypes = nil
	file_DungeonSettleNotify_proto_depIdxs = nil
}
